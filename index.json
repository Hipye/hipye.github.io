[{"content":"${ENV_DIR}/rootfs/linux\n自定义路径","permalink":"https://www.omoe.cc/posts/linuxdepoly%E9%83%A8%E7%BD%B2/","summary":"","title":"Linuxdepoly部署"},{"content":"export CLASSPATH=.:$JAVA_HOME/lib/mysql-connector-java-8.0.16.jar ","permalink":"https://www.omoe.cc/posts/java%E5%9F%BA%E7%A1%80/","summary":"","title":"Java基础"},{"content":"当您在使用 “UPDATE user SET password=PASSWORD(‘newpassword’) WHERE User=‘root’;” 命令时提示 “ERROR 1356 (HY000): View ‘mysql.user’ references invalid table(s) or column(s) or function(s) or definer/invoker of view lack rights to use them”，表明在您的 MariaDB 版本中，‘user’ 表已经不存在，由于版本不同的MariaDB解决方案也不同。\n#\u0026gt;10.4.4 ALTER USER \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;newpassword\u0026#39;; #\u0026lt;10.4.4 SET PASSWORD FOR \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; = PASSWORD(\u0026#39;newpassword\u0026#39;); 先登入数据库\n#使用mysql use mysql #查询 SELECT User, Password, Host FROM user; #创建用户 CREATE USER \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED BY \u0026#39;root\u0026#39;; #授权 grant all privileges on *.* to \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39;; #刷新 FLUSH PRIVILEGES; #创建数据库 create DATABASE RUNOOB; #删除数据库 drop database RUNOOB; #使用数据库 use RUNOOB; #添加数据表 CREATE TABLE `websites` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` char(20) NOT NULL DEFAULT \u0026#39;\u0026#39; COMMENT \u0026#39;站点名称\u0026#39;, `url` varchar(255) NOT NULL DEFAULT \u0026#39;\u0026#39;, `alexa` int(11) NOT NULL DEFAULT \u0026#39;0\u0026#39; COMMENT \u0026#39;Alexa 排名\u0026#39;, `country` char(10) NOT NULL DEFAULT \u0026#39;\u0026#39; COMMENT \u0026#39;国家\u0026#39;, PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8; INSERT INTO `websites` VALUES (\u0026#39;1\u0026#39;, \u0026#39;Google\u0026#39;, \u0026#39;https://www.google.cm/\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;USA\u0026#39;), (\u0026#39;2\u0026#39;, \u0026#39;淘宝\u0026#39;, \u0026#39;https://www.taobao.com/\u0026#39;, \u0026#39;13\u0026#39;, \u0026#39;CN\u0026#39;), (\u0026#39;3\u0026#39;, \u0026#39;菜鸟教程\u0026#39;, \u0026#39;http://www.runoob.com\u0026#39;, \u0026#39;5892\u0026#39;, \u0026#39;\u0026#39;), (\u0026#39;4\u0026#39;, \u0026#39;微博\u0026#39;, \u0026#39;http://weibo.com/\u0026#39;, \u0026#39;20\u0026#39;, \u0026#39;CN\u0026#39;), (\u0026#39;5\u0026#39;, \u0026#39;Facebook\u0026#39;, \u0026#39;https://www.facebook.com/\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;USA\u0026#39;); ","permalink":"https://www.omoe.cc/posts/mysql%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/","summary":"","title":"Mysql基础命令"},{"content":"\u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;io.test.moriz\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;testm\u0026lt;/artifactId\u0026gt; \u0026lt;packaging\u0026gt;jar\u0026lt;/packaging\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;name\u0026gt;testm\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://maven.apache.org\u0026lt;/url\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;junit\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.8.1\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- https://mvnrepository.com/artifact/javax.mail/mail --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;javax.mail\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mail\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.5.0-b01\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- https://mvnrepository.com/artifact/javax.activation/activation --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;javax.activation\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;activation\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.1.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;mysql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mysql-connector-java\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;8.0.28\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;!-- 项目最终打包成的名字 --\u0026gt; \u0026lt;finalName\u0026gt;1\u0026lt;/finalName\u0026gt; \u0026lt;!-- 用于打包的依赖 --\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-assembly-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;archive\u0026gt; \u0026lt;!-- 指定启动类 --\u0026gt; \u0026lt;manifest\u0026gt; \u0026lt;mainClass\u0026gt;io.test.moriz.MySQLDemo\u0026lt;/mainClass\u0026gt; \u0026lt;/manifest\u0026gt; \u0026lt;/archive\u0026gt; \u0026lt;!-- 指定启动类 --\u0026gt; \u0026lt;descriptorRefs\u0026gt; \u0026lt;descriptorRef\u0026gt;jar-with-dependencies\u0026lt;/descriptorRef\u0026gt; \u0026lt;/descriptorRefs\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;!-- 相当于在执行 package 打包时，在后面加上 assembly:single --\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;make-assembly\u0026lt;/id\u0026gt; \u0026lt;phase\u0026gt;package\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;single\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt; ","permalink":"https://www.omoe.cc/posts/mvn/","summary":"","title":"Maven基础配置"},{"content":"alpine 中MySQL 用的就是MariaDB apk add mysql mysql-client\n或 apk add mariadb mariadb-client\n配置\n创建运行mysqld 后台进程必须的目录并赋给mysql 组和mysql 用户 mkdir -p /run/mysqld\nchown -R mysql:mysql /run/mysqld\n加载数据库文件 chown -R mysql:mysql /var/lib/mysql\nmysql_install_db \u0026ndash;user=mysql \u0026ndash;ldata=/var/lib/mysql\n检验\n启动mysqld，注意加个\u0026amp; 后台运行，否则只能Ctrl+p，Ctrl+q 退出再docker exec 进来了 /usr/bin/mysqld_safe \u0026ndash;datadir=\u0026rsquo;/var/lib/mysql\u0026rsquo; \u0026amp;\n设置root 密码 mysqladmin -u root password \u0026ldquo;root\u0026rdquo;\n客户端检验\n客户端登录，注意-p 后面直接跟密码不能有空格 mysql -u root -p\u0026quot;root\u0026quot;\n使用内置的mysql数据库，测试SQL语句\nuse mysql\nselect count(*) from user;\nexit\n","permalink":"https://www.omoe.cc/posts/alpine%E5%AE%89%E8%A3%85mysql%E6%9C%8D%E5%8A%A1/","summary":"","title":"Alpine安装mysql服务"},{"content":"@Override//重写覆盖 public void onResume(){ super.onResume(); //获取焦点，界面可见时候执行刷新 if (isVisible){ //执行的函数 } } mImageView.setOnClickListener {//往iv控件上设置 val builder = MaterialAlertDialogBuilder(this.requireContext())//在Fragment中得使用.requireContext() builder.setTitle(\u0026#34;当前标签主要色\u0026#34;) builder.setMessage(\u0026#34;是否复制当前色彩标签的主要色\u0026#34;) builder.setPositiveButton(\u0026#34;色彩三\u0026#34;) { dialog, which -\u0026gt; val clipboardManager = requireActivity().getSystemService(CLIPBOARD_SERVICE) as ClipboardManager val clipData = ClipData.newPlainText(\u0026#34;Label\u0026#34;, \u0026#34;#8A4730\u0026#34;) clipboardManager.setPrimaryClip(clipData) showToast(this.requireContext(),\u0026#34;复制色块三成功\u0026#34;) } builder.setNeutralButton(\u0026#34;色彩一\u0026#34;) { dialog, which -\u0026gt; val clipboardManager = requireActivity().getSystemService(CLIPBOARD_SERVICE) as ClipboardManager val clipData = ClipData.newPlainText(\u0026#34;Label\u0026#34;, \u0026#34;#E18FBD\u0026#34;) clipboardManager.setPrimaryClip(clipData) showToast(this.requireContext(),\u0026#34;复制色块一成功\u0026#34;) } builder.setNegativeButton(\u0026#34;色彩二\u0026#34;) { dialog, which -\u0026gt; val clipboardManager = requireActivity().getSystemService(CLIPBOARD_SERVICE) as ClipboardManager val clipData = ClipData.newPlainText(\u0026#34;Label\u0026#34;, \u0026#34;#4D739A\u0026#34;) clipboardManager.setPrimaryClip(clipData) showToast(this.requireContext(),\u0026#34;复制色块二成功\u0026#34;) } builder.show()//展示整个Dialog } ","permalink":"https://www.omoe.cc/posts/kotlin%E8%A6%81%E7%82%B9%E8%AE%B0%E5%BD%95/","summary":"","title":"Kotlin要点记录"},{"content":"nginx -t -c /etc/nginx/uci.conf #测试配置文件 nginx -T -c /etc/nginx/uci.conf #详细测试配置文件\n/etc/nginx/conf.d 目录下新建subweb.conf\nserver { listen 10088; listen [::]:10088; server_name _; charset utf-8; location / { root /storage/data/share; index index.html; autoindex on; autoindex_exact_size off; autoindex_localtime on; add_header Cache-Control no-store; } } /etc/init.d/nginx reload #重新读取配置\n/etc/init.d/nginx restart #重启nginx服务\nnetstat -anutp |grep 10088 #查看10088端口监听\n","permalink":"https://www.omoe.cc/posts/openwrt%E5%88%87%E6%8D%A2nginx/","summary":"","title":"Openwrt切换nginx"},{"content":"class MainActivityB : AppCompatActivity() { var filePath: String? = null var fileName: String? = null var textView: TextView? = null var inputStreamRawTxt: InputStream? = null var handler: Handler = object : Handler() { override fun handleMessage(msg: Message) { super.handleMessage(msg) textView!!.text = msg.obj.toString() } } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) initView() initData() initEvent() } private fun initView() { textView = findViewById(R.id.filelisttv) } private fun initData() { filePath = (Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS).absolutePath + \u0026#34;/\u0026#34;) fileName = \u0026#34;flname.txt\u0026#34; L.d(\u0026#34;${filePath}${fileName}\u0026#34;) // inputStreamRawTxt =getResources().openRawResource(R.raw.printf); } private fun initEvent() { //判断是否有该文件夹，没有则创建一个，生成文件夹之后，再生成文件，不然会出错 makeDirectory(filePath) //在线程中执行耗时操作 Thread { //判断是否有该文件，没有则创建一个,并返回true if (createNewFile(filePath, fileName)) { //返回true说明创建了新的文件，则写入预设内容， //返回false，则说明文件已存在，不需要写入（也不会进入该判断） //将输入流转换成字符串，写入文件 val rawTxtString = Stream2String(inputStreamRawTxt) writeTxtToFile(rawTxtString, filePath, fileName) } //再将文件读取为字符串 val text = ReadTxtFromSDCard(fileName) //显示出来 val message = Message.obtain(handler) message.obj = text handler.sendMessage(message) }.start() } // 生成文件 fun createNewFile(filePath: String?, fileName: String?): Boolean { var file: File? = null try { file = File(filePath + fileName) return if (!file.exists()) { file.createNewFile() true } else { false } } catch (e: Exception) { e.printStackTrace() } return false } // 将字符串写入到文本文件中 fun writeTxtToFile( stringContent: String, filePath: String?, fileName: String? ) { val strFilePath = filePath + fileName // 每次写入时，都换行写 val strContent = \u0026#34;\u0026#34;\u0026#34; $stringContent \u0026#34;\u0026#34;\u0026#34;.trimIndent() val file = File(strFilePath) try { val raf = RandomAccessFile(file, \u0026#34;rwd\u0026#34;) raf.seek(file.length()) raf.write(strContent.toByteArray()) raf.close() } catch (e: Exception) { Log.e(\u0026#34;TestFile\u0026#34;, \u0026#34;Error on write File:$e\u0026#34;) } } private fun Stream2String(`is`: InputStream?): String { //强制缓存大小为16KB，一般Java类默认为8KB val reader = BufferedReader( InputStreamReader(`is`), 16 * 1024 ) val sb = StringBuilder() var line: String? = null try { while (reader.readLine().also { line = it } != null) { //处理换行符 sb.append( \u0026#34;\u0026#34;\u0026#34; $line \u0026#34;\u0026#34;\u0026#34;.trimIndent() ) } } catch (e: IOException) { e.printStackTrace() } finally { try { `is`!!.close() } catch (e: IOException) { e.printStackTrace() } } return sb.toString() } //这是这篇的重点，按ctrl+f关注input的操作 private fun ReadTxtFromSDCard(filename: String?): String { val sb = StringBuilder(\u0026#34;\u0026#34;) //判断是否有读取权限 if (Environment.getExternalStorageState() == Environment.MEDIA_MOUNTED) { //打开文件输入流 try { val input = FileInputStream(filePath + filename) val temp = ByteArray(1024) var len = 0 //读取文件内容: while (input.read(temp).also { len = it } \u0026gt; 0) { sb.append(String(temp, 0, len)) L.d(sb.toString()) } //关闭输入流 input.close() } catch (e: IOException) { Log.e(\u0026#34;ReadTxtFromSDCard\u0026#34;, \u0026#34;ReadTxtFromSDCard\u0026#34;) e.printStackTrace() } } return sb.toString() } companion object { // 生成文件夹 fun makeDirectory(filePath: String?) { var file: File? = null try { file = File(filePath) if (!file.exists()) { file.mkdir() } } catch (e: Exception) { Log.i(\u0026#34;error:\u0026#34;, e.toString() + \u0026#34;\u0026#34;) } } } } ","permalink":"https://www.omoe.cc/posts/%E5%AE%89%E5%8D%93kotlin%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/","summary":"","title":"安卓kotlin文件读取"},{"content":"在项目下的settings.gradle修改\npluginManagement { repositories { maven { url \u0026#39;https://plugins.gradle.org/m2/\u0026#39; } maven { url \u0026#39;https://maven.aliyun.com/nexus/content/repositories/google\u0026#39; } maven { url \u0026#39;https://maven.aliyun.com/nexus/content/groups/public\u0026#39; } maven { url \u0026#39;https://maven.aliyun.com/nexus/content/repositories/jcenter\u0026#39;} google() mavenCentral() gradlePluginPortal() } } dependencyResolutionManagement { repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS) repositories { maven { url \u0026#39;https://plugins.gradle.org/m2/\u0026#39; } maven { url \u0026#39;https://maven.aliyun.com/nexus/content/repositories/google\u0026#39; } maven { url \u0026#39;https://maven.aliyun.com/nexus/content/groups/public\u0026#39; } maven { url \u0026#39;https://maven.aliyun.com/nexus/content/repositories/jcenter\u0026#39;} google() mavenCentral() } } ","permalink":"https://www.omoe.cc/posts/gradle%E4%B8%8B%E8%BD%BD%E9%BE%9F%E9%80%9F%E9%97%AE%E9%A2%98/","summary":"\u003cp\u003e在项目下的settings.gradle修改\u003c/p\u003e","title":"Gradle下载龟速问题"},{"content":"交叉编译aria2\n下载交叉编译工具(这里推荐r21e比较稳定且兼容)\n系统版本 链接 sha1 linux https://dl.google.com/android/repository/android-ndk-r21e-linux-x86_64.zip\rc3ebc83c96a4d7f539bd72c241b2be9dcd29bda9 win https://dl.google.com/android/repository/android-ndk-r21e-windows-x86_64.zip\rfc44fea8bb3f5a6789821f40f41dce2d2cd5dc30 mac https://dl.google.com/android/repository/android-ndk-r21e-darwin-x86_64.zip\r3f15c23a1c247ad17c7c271806848dbd40434738 导入交叉编译工具\nexport PATH=$PATH:/opt/android-ndk-r21e/toolchains/llvm/prebuilt/linux-x86_64/bin 自带sdk管理器下载\nsdkmanager \\ \u0026#34;platform-tools\u0026#34; \\ \u0026#34;build-tools;28.0.3\u0026#34; \\ \u0026#34;platforms;android-33\u0026#34; \\ \u0026#34;platforms;android-28\u0026#34; \\ \u0026#34;platforms;android-24\u0026#34; \\ \u0026#34;platforms;android-21\u0026#34; PKG_CONFIG_PATH=/data/data/com.termux/files/usr/lib/pkgconfig/ LD_LIBRARY_PATH=/data/data/com.termux/files/usr/lib export CROSS_COMPILE=armv7a-linux-androideabi- --prefix=/data/data/com.termux/files/usr android zlib静态库文件\nPKG_CONFIG_PATH=/data/data/com.termux/files/usr/lib/pkgconfig/ \\ LD_LIBRARY_PATH=/data/data/com.termux/files/usr/lib/ \\ CXX=aarch64-linux-android29-clang++ \\ CC=aarch64-linux-android29-clang \\ AR=aarch64-linux-android-ar \\ RANLIB=aarch64-linux-android-ranlib \\ ./configure --prefix=/data/data/com.termux/files/usr --static expat静态库\nPKG_CONFIG_PATH=/data/data/com.termux/files/usr/lib/pkgconfig/ \\ LD_LIBRARY_PATH=/data/data/com.termux/files/usr/lib/ \\ CXX=aarch64-linux-android29-clang++ \\ CC=aarch64-linux-android29-clang \\ AR=aarch64-linux-android-ar \\ RANLIB=aarch64-linux-android-ranlib \\ ./configure \\ --host=aarch64-linux-android \\ --prefix=/data/data/com.termux/files/usr \\ --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` \\ --enable-static=yes \\ --enable-shared=no c-ares静态库\nPKG_CONFIG_PATH=/data/data/com.termux/files/usr/lib/pkgconfig/ \\ LD_LIBRARY_PATH=/data/data/com.termux/files/usr/lib/ \\ CXX=aarch64-linux-android29-clang++ \\ CC=aarch64-linux-android29-clang \\ AR=aarch64-linux-android-ar \\ RANLIB=aarch64-linux-android-ranlib \\ ./configure \\ --host=aarch64-linux-android \\ --prefix=/data/data/com.termux/files/usr \\ --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` \\ --enable-static \\ --disable-shared openssl静态库\nPKG_CONFIG_PATH=/data/data/com.termux/files/usr/lib/pkgconfig/ \\ LD_LIBRARY_PATH=/data/data/com.termux/files/usr/lib/ \\ CXX=aarch64-linux-android29-clang++ \\ CC=aarch64-linux-android29-clang \\ AR=aarch64-linux-android-ar \\ RANLIB=aarch64-linux-android-ranlib \\ ./Configure \\ android-arm64 -march=armv8-a -mtune=cortex-a53 \\ --prefix=/data/data/com.termux/files/usr \\ shared zlib zlib-dynamic -D_GNU_SOURCE -D_BSD_SOURCE \\ --with-zlib-lib=/data/data/com.termux/files/usr/lib \\ --with-zlib-include=/data/data/com.termux/files/usr/include libssh2静态库\nPKG_CONFIG_PATH=/data/data/com.termux/files/usr/lib/pkgconfig/ \\ LD_LIBRARY_PATH=/data/data/com.termux/files/usr/lib/ \\ CXX=aarch64-linux-android29-clang++ \\ CC=aarch64-linux-android29-clang \\ AR=aarch64-linux-android-ar \\ RANLIB=aarch64-linux-android-ranlib \\ ./configure \\ CPPFLAGS=\u0026#34;-I,/data/data/com.termux/files/usr/include\u0026#34; \\ LDFLAGS=\u0026#34;-Wl,-rpath-link,/data/data/com.termux/files/usr/lib\u0026#34; \\ --prefix=\u0026#34;/data/data/com.termux/files/usr\u0026#34; \\ --with-libssl-prefix=/data/data/com.termux/files/usr \\ --with-libz-prefix=/data/data/com.termux/files/usr \\ --host=aarch64-linux-android sqlite静态库\nPKG_CONFIG_PATH=/data/data/com.termux/files/usr/lib/pkgconfig/ \\ LD_LIBRARY_PATH=/data/data/com.termux/files/usr/lib/ \\ CXX=aarch64-linux-android29-clang++ \\ CC=aarch64-linux-android29-clang \\ AR=aarch64-linux-android-ar \\ RANLIB=aarch64-linux-android-ranlib \\ ./configure --host=aarch64-linux-android \\ --prefix=/data/data/com.termux/files/usr/ --enable-static \\ --enable-shared \\ --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` 在编译 aria2时因为1.36相比1.35有修改所以必须修改到源码部分才能顺利编译\n这一步必须↓操作，不然进行ARIA2_STATIC=yes链接会失败\nsed -i \u0026#39;s|-lrt||g;s|-lpthread||g\u0026#39; $(grep -rEl \u0026#39;\\-lrt|\\-lpthread\u0026#39; .) sed -i \u0026#39;s|timegm(|timegm_(|g\u0026#39; $(grep -rl \u0026#39;timegm(\u0026#39; .) 开始编译\nPKG_CONFIG_PATH=/data/data/com.termux/files/usr/lib/pkgconfig/ \\ LD_LIBRARY_PATH=/data/data/com.termux/files/usr/lib/ \\ CXX=aarch64-linux-android29-clang++ \\ CC=aarch64-linux-android29-clang \\ AR=aarch64-linux-android-ar \\ RANLIB=aarch64-linux-android-ranlib \\ ./configure \\ --host=aarch64-linux-android \\ --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` \\ --prefix=/data/data/com.termux/files/usr/ \\ --disable-nls \\ --without-gnutls \\ --with-openssl \\ --without-libxml2 \\ --with-libz --with-libz-prefix=/data/data/com.termux/files/usr/ \\ --with-libexpat --with-libexpat-prefix=/data/data/com.termux/files/usr/ \\ --with-slite3 --with-sqlite3-prefix=/data/data/com.termux/files/usr/ \\ --with-libcares --with-libcares-prefix=/data/data/com.termux/files/usr/ \\ --with-ca-bundle=\u0026#39;/data/data/com.termux/files/usr/ssl/certs/ca-certificates.crt\u0026#39; \\ LDFLAGS=\u0026#34;-L/data/data/com.termux/files/usr/lib\u0026#34; \\ PKG_CONFIG_PATH=\u0026#34;/data/data/com.termux/files/usr/lib/pkgconfig\u0026#34; \\ ARIA2_STATIC=yes aria2编译\n系统自带工具打包 sudo checkinstall -D --install=no 打包过程中提示\nThe package documentation directory ./doc-pak does not exist. Should I create a default set of package docs? [y]:n #不需要创建doc文档 0 - Maintainer: [ root@DESKTOP-U5H0M22 ]#编译设备 1 - Summary: [ moriz build aria2 ]#自定义信息 2 - Name: [ aria2 ]#文件名\u0026amp;卸载用 3 - Version: [ 1.36.0 ]#版本 4 - Release: [ 1 ]#发布 5 - License: [ GPL ]#协议 6 - Group: [ checkinstall ]#可忽略 7 - Architecture: [ aarch64 ]#编译目标的cpu架构 8 - Source location: [ aria2-release-1.36.0 ]#可忽略 9 - Alternate source location: [ ]#可忽略 10 - Requires: [ libc++, c-ares, openssl, libxml2, zlib ]#软件所需依赖包 11 - Recommends: [ ]#可忽略 12 - Suggests: [ ]#可忽略 13 - Provides: [ aria2-release ]#可忽略 14 - Conflicts: [ ]#可忽略 15 - Replaces: [ ]#可忽略 注意选项7必须修改目标设备的cpu架构 成功后显示内容如下，文件所在文件夹和安装过程提示，后面安装过程略过 新建文件夹解包\ndpkg-deb -R xxxxx.deb . #非必须 重新打包命令不一样\ndpkg -b xxx new_deb_name.deb #非必须 ********************************************************************** Done. The new package has been saved to $HOME/aria2-release-1.36.0/aria2-release_1.36.0-1_aarch64.deb You can install it in your system anytime using: dpkg -i aria2-release_1.36.0-1_aarch64.deb ********************************************************************** 安装使用dpkg -i，使用aria2c --v，出现如下内容成功需要多线程则aria2c -x 128 +链接即可\naria2 version 1.36.0 Copyright (C) 2006, 2019 Tatsuhiro Tsujikawa This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. ** Configuration ** Enabled Features: Async DNS, BitTorrent, Firefox3 Cookie, GZip, HTTPS, Message Digest, Metalink, XML-RPC, SFTP Hash Algorithms: sha-1, sha-224, sha-256, sha-384, sha-512, md5, adler32 Libraries: zlib/1.2.13 expat/2.5.0 sqlite3/3.39.4 OpenSSL/1.1.1s c-ares/1.18.1 libssh2/1.10.0 Compiler: clang 9.0.9 (https://android.googlesource.com/toolchain/llvm-project a2a1e703c0edb03ba29944e529ccbf457742737b) built by x86_64-pc-linux-gnu targeting aarch64-unknown-linux-android on Nov 10 2022 15:30:40 System: Linux 4.19.113-perf-g4a878ec38421 #1 SMP PREEMPT Tue May 11 02:13:41 CST 2021 aarch64 Report bugs to https://github.com/aria2/aria2/issues Visit https://aria2.github.io/ 群晖交叉编译[相关]\ropenssl编译问题[相关]\raria2 1.36源码静态库链接编译问题[相关]\r","permalink":"https://www.omoe.cc/posts/ndk%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91aria2/","summary":"\u003cp\u003e交叉编译aria2\u003c/p\u003e","title":"Ndk交叉编译aria2"},{"content":"node相关\nnpm install nodemailer --save // 这里举简单例子，也可以封装成service来调用 // 引入nodemailer const nodemailer = require(\u0026#39;nodemailer\u0026#39;); // 封装发送者信息 const transporter = nodemailer.createTransport({ host: \u0026#39;smtp.qq.com\u0026#39;, // 调用qq服务器 secureConnection: true, // 启动SSL port: 465, // 端口就是465 auth: { user: \u0026#39;mrcdh@qq.com\u0026#39;, // 账号 pass: \u0026#39;xxxxxxxxxx\u0026#39;, // 授权码, }, }); // 邮件参数及内容 const mailOptions = { from: \u0026#39;mrcdh@qq.com\u0026#39;, // 发送者,与上面的user一致 // 可以指定发送者的名字，和发送邮箱用空格隔开 //from: \u0026#39;mrcdh mrcdh@qq.com\u0026#39;, to: \u0026#39;xxxx@xxx.com\u0026#39;, // 接收者,可以同时发送多个,以逗号隔开 subject: \u0026#39;测试的邮件\u0026#39;, // 标题 // text: \u0026#39;测试内容\u0026#39;, // 文本 html: \u0026#39;\u0026lt;h2\u0026gt;测试一下:\u0026lt;/h2\u0026gt;\u0026lt;a href=\u0026#34;https://baidu.com\u0026#34;\u0026gt;测试链接\u0026lt;/a\u0026gt;\u0026#39;, }; // 调用函数，发送邮件 await transporter.sendMail(mailOptions, function(err, info) { if (err) { console.log(err); return; } console.log(info); }); const mailOptions = { from:\u0026#39;mrcdh@qq.com\u0026#39;, to: \u0026#39;xxxxxxxxx@163.com\u0026#39;, subject: \u0026#39;hello\u0026#39;, html: \u0026#34;\u0026lt;img src=\u0026#39;cid:01\u0026#39; style=\u0026#39;width:200px;height:auto\u0026#39;\u0026gt;\u0026#34;, attachments: [{ \u0026#34;filename\u0026#34;:\u0026#34;好歌.mp3\u0026#34;, \u0026#34;path\u0026#34;:\u0026#34;./haoge.mp3\u0026#34; },{ \u0026#34;filename\u0026#34;:\u0026#34;test.txt\u0026#34;, \u0026#34;content\u0026#34;:\u0026#34;测试可写的文件\u0026#34; },{ \u0026#34;filename\u0026#34;:\u0026#34;test.JPG\u0026#34;, \u0026#34;path\u0026#34;:\u0026#34;./test.JPG\u0026#34;, \u0026#34;cid\u0026#34;:\u0026#34;01\u0026#34; // 插在邮件正文中的图片 }] }; const mailOptions = { from:\u0026#39;mrcdh@qq.com\u0026#39;, to: \u0026#39;xxxxxxxxx@163.com\u0026#39;, subject: \u0026#39;hello\u0026#39;, html: \u0026#34;\u0026lt;img src=\u0026#39;cid:01\u0026#39; style=\u0026#39;width:200px;height:auto\u0026#39;\u0026gt;\u0026#34;, attachments: [{ \u0026#34;filename\u0026#34;:\u0026#34;好歌.mp3\u0026#34;, \u0026#34;path\u0026#34;:\u0026#34;./haoge.mp3\u0026#34; },{ \u0026#34;filename\u0026#34;:\u0026#34;test.txt\u0026#34;, \u0026#34;content\u0026#34;:\u0026#34;测试可写的文件\u0026#34; },{ \u0026#34;filename\u0026#34;:\u0026#34;test.JPG\u0026#34;, \u0026#34;path\u0026#34;:\u0026#34;./test.JPG\u0026#34;, \u0026#34;cid\u0026#34;:\u0026#34;01\u0026#34; // 插在邮件正文中的图片 }] }; ","permalink":"https://www.omoe.cc/posts/node%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/","summary":"\u003cp\u003enode相关\u003c/p\u003e","title":"Node邮件发送"},{"content":"npm相关\nnodejs安装 curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash - 允许 sudo apt-get install -y nodejs 来安装 Node.js 14.x 和 npm 使用开发者工具箱来编译添加插件 sudo apt-get install gcc g++ make 使用yarn包管理器安装 curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | sudo tee /usr/share/keyrings/yarnkey.gpg \u0026gt;/dev/null or echo \u0026quot;deb [signed-by=/usr/share/keyrings/yarnkey.gpg] https://dl.yarnpkg.com/debian stable main\u0026quot; | sudo tee /etc/apt/sources.list.d/yarn.list or sudo apt-get update \u0026amp;\u0026amp; sudo apt-get install yarn npm换源解决网络问题\nnpm config set registry https://r.cnpmjs.org/ error: cnpm - 解决 \u0026quot; cnpm : 无法加载文件 C:\\Users?\\AppData\\Roaming\\npm\\cnpm.ps1，因为在此系统上禁止运行脚本。\nset-ExecutionPolicy RemoteSigned #A npm install \u0026ndash;legacy-peer-deps element-ui \u0026ndash;save vue ui创建项目时，出现如下错误： ERROR Failed to get response from http://registry.npmjs.org/vue-cli-version-marker\r找到$HOME/.vuerc\n{ \u0026#34;useTaobaoRegistry\u0026#34;: false, \u0026#34;packageManager\u0026#34;: \u0026#34;yarn\u0026#34; } npm ERR! ERESOLVE unable to resolve dependency tree\nnpx -p npm@6 npm i --legacy-peer-deps ","permalink":"https://www.omoe.cc/posts/npm%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B/","summary":"\u003cp\u003enpm相关\u003c/p\u003e","title":"Npm安装以及使用流程"},{"content":"制作导航页相关\n安装npm 过程不赘述了网上一大把\nnpm安装组件 npm install vue@next #最新稳定版 npm install -g @vue/cli vite2 element-plus vue-router axios less serve -S 生成 npm init vite@latest # 选择vue模板 启动npm run dev 集成 Element-Plus #main.js import ElementPlus from \u0026#39;element-plus\u0026#39; import \u0026#39;element-plus/dist/index.css\u0026#39; createApp(App).use(ElementPlus).mount(\u0026#39;#app\u0026#39;) 在需要使用时单独引用\nimport { CirclePlus } from \u0026#39;element-plus/icons\u0026#39; 集成vue-router路由 创建一个文件夹src两个文件index.js routes.js\nmkdir src/router touch src/router/index.js touch src/router/routes.js index.js文件内容如下\n// src\\router\\index.js import { createRouter, createWebHistory } from \u0026#34;vue-router\u0026#34;; import routes from \u0026#39;./routes.js\u0026#39; const routerHistory = createWebHistory(); const router = createRouter({ history: routerHistory, routes }) export default router routes.js文件内容如下\n// src\\router\\routes.js const routers = [ { path: \u0026#39;/\u0026#39;, redirect: \u0026#39;/x\u0026#39;, component: () =\u0026gt; import(\u0026#39;../view/Onepage.vue\u0026#39;) }, ] export default routers main.js引入\nimport router from \u0026#39;./router/index\u0026#39; createApp(App).use(router).use(ElementPlus).mount(\u0026#39;#app\u0026#39;)//原有基础上添加 创建跳转页面 mkdir src/view touch src/view/Onepage.vue onepage页面如下\n\u0026lt;script setup\u0026gt; // import { CirclePlus } from \u0026#39;element-plus/icons\u0026#39; //集成element图标 import homez from \u0026#39;../components/Home.vue\u0026#39; import searchz from \u0026#39;../components/Search.vue\u0026#39; \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;homez\u0026gt;\u0026lt;/homez\u0026gt; \u0026lt;!-- \u0026lt;searchz\u0026gt;\u0026lt;/searchz\u0026gt; --\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style scoped\u0026gt; \u0026lt;/style\u0026gt; App.vue引入界面 \u0026lt;template\u0026gt; \u0026lt;router-view\u0026gt;\u0026lt;/router-view\u0026gt; \u0026lt;!--加上路由标签，路由才会有效果--\u0026gt; \u0026lt;/template\u0026gt; 修改默认body pading 8px的边框只需在根目录下的index.html文件里的body右边添加\nstyle=\u0026#34;padding: 0px; margin: 0px;\u0026#34; flex布局 justify-content: flex-start | flex-end | center | space-between | space-around; /*主轴对齐方式：左对齐（默认） | 右对齐 | 居中对齐 | 两端对齐 | 平均分布*/ align-items: flex-start | flex-end | center | baseline | stretch; /*交叉轴对齐方式：顶部对齐（默认） | 底部对齐 | 居中对齐 | 文本基线对齐 | 上下对齐并铺满*/ 盒子兼容\ndisplay:-webkit-flex; 属性兼容\n-webkit-align-items:center; flex布局多个子元素垂直居中\ndisplay: flex; display: -webkit-flex; flex-wrap: wrap; justify-content: center; flex-direction : column; 雨滴效果实现 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;home\u0026#34;\u0026gt; \u0026lt;canvas id=\u0026#34;canvas\u0026#34; /\u0026gt; \u0026lt;!-- 换成自己的图片 --\u0026gt; \u0026lt;img :style=\u0026#34;canvasStyle\u0026#34; src=\u0026#34;../assets/pic121.jpg\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import { init } from \u0026#34;@/components/canvas.js\u0026#34;; export default { name: \u0026#34;Home\u0026#34;, data() { return { canvasStyle: { position: \u0026#34;fixed\u0026#34;, width: \u0026#34;100%\u0026#34;, height: \u0026#34;100%\u0026#34;, zIndex: \u0026#34;-1\u0026#34;, left: \u0026#34;0\u0026#34;, bottom: \u0026#34;0\u0026#34;, }, ctx: {}, }; }, mounted() { this.initCanvas(); }, methods: { initCanvas() { const canvas = document.querySelector(\u0026#34;#canvas\u0026#34;); this.ctx = canvas.getContext(\u0026#34;2d\u0026#34;); canvas.width = window.innerWidth; canvas.height = window.innerHeight; init(this.ctx); }, }, }; \u0026lt;/script\u0026gt; 创建rain.js文件 // 画笔 var ctx; // 画布的宽高 var w = window.innerWidth; var h = window.innerWidth; // 存放雨滴的数组 var arr = []; // 雨滴的数量 var size = 150; // 雨滴的构造函数 class Rain { x = random(w); y = random(h); ySpeed = random(2) + 5; show() { drawLine(this.x, this.y); } run() { if (this.y \u0026gt; h) { this.y = 0; this.x = random(w); } this.y = this.y + this.ySpeed; } } // 画线（雨滴） function drawLine(x1, y1) { ctx.beginPath(); ctx.strokeStyle = \u0026#34;#cccccc\u0026#34;; ctx.moveTo(x1, y1); // 雨长度为30 ctx.lineTo(x1, y1 + 30); ctx.stroke(); } // 生成随机数 function random(num) { return Math.random() * num; } // 开始 function start() { for (var i = 0; i \u0026lt; size; i++) { var rain = new Rain(); arr.push(rain); rain.show(); } setInterval(() =\u0026gt; { ctx.clearRect(0, 0, w, h); for (var i = 0; i \u0026lt; size; i++) { arr[i].show(); arr[i].run(); } }, 10); } // 初始化 function init(ctx1) { ctx = ctx1; start(); } // 导出初始化函数 export { init }; 鼠标滑过样式 /*缓动上移*/ .lists{ display: flex; margin-top: 100px; justify-content: center; } .box{ width: 200px; height: 200px; transition: all 0.3s; } .box~.box{ margin-left: 15px; } .box img{width: 100%;height: 100%;} .box:hover{ transform: translateY(-6px); } /*放大效果*/ .lists{ display: flex; margin-top: 100px; justify-content: center; } .box{ width: 200px; height: 200px; transition: all 0.3s; } .box~.box{ margin-left: 15px; } .box img{width: 100%;height: 100%;} .box:hover{ transform: scale(1.03); } /*框内放大效果*/ .lists{ display: flex; margin-top: 100px; justify-content: center; } .box{ width: 200px; height: 200px; overflow:hidden; } .box~.box{ margin-left: 15px; } .box img{ width: 100%; height: 100%; transition: all 0.5s; } .box:hover img{ transform: scale(1.1); } /*蒙层效果*/ .lists{ display: flex; margin-top: 100px; justify-content: center; } .box{ width: 200px; height: 200px; overflow:hidden; background-color: #4f4f4f; } .box~.box{ margin-left: 15px; } .box img{ width: 100%; height: 100%; transition: all 0.5s; } .box:hover img{ opacity: 0.8 } /*框内放大图片+阴影*/ .lists{ display: flex; margin-top: 100px; justify-content: center; } .item{ width: 200px; color: #333; text-decoration: none; border: 1px solid #eee; transition: all 0.5s; } .item .item_pic{ width: 200px; height: 200px; overflow: hidden; } .item .item_pic img{ width: 100%; height: 100%; transition: all 0.5s; } .item:hover .item_pic img{ transform: scale(1.1); } .item:hover{ box-shadow: 0 0 15px rgba(0,0,0,0.2); } .item_content{ padding: 20px 10px; } /*缓动上滑+阴影*/ .lists{ display: flex; margin-top: 100px; justify-content: center; } .item{ width: 200px; color: #333; text-decoration: none; border: 1px solid #eee; transition: all 0.5s; margin-right: 20px; } .item .item_pic{ width: 200px; height: 200px; overflow: hidden; } .item .item_pic img{ width: 100%; height: 100%; transition: all 0.5s; } .item:hover{ /*-1或者-2最佳*/ transform: translateY(-1px); box-shadow: 0 0 15px rgba(0,0,0,0.3); } .item_content{ padding: 20px 10px; } /*蒙层效果+文字变色+边框*/ .lists{ display: flex; margin-top: 100px; justify-content: center; } .item{ width: 200px; color: #333; text-decoration: none; border: 1px solid #eee; margin-right: 20px; transition: all 0.5s; } .item .item_pic{ width: 200px; height: 200px; overflow: hidden; background-color: #4f4f4f; } .item .item_pic img{ width: 100%; height: 100%; transition: all 0.5s; } .item:hover{ border: 1px solid green; } .item:hover .item_pic img{ opacity: 0.8; } .item:hover .item_content{ color: green; } .item_content{ padding: 20px 10px; transition: all 0.5s; } /*文字覆盖图片DIV*/ .box { position:relative; z-index:1; display:inline-block; overflow:hidden; background:#3085a3; text-align:center; cursor:pointer } .box img { width:200px; height:200px; opacity:1; transition:opacity .35s,transform .35s; float:left; } .box:hover img { opacity:.5; } .box h3 { margin-top:20%; transition:transform .35s; transform:translate3d(0,20px,0); opacity:0; color:#fff; font-size:16px; } .box p { margin:10px 0 0; padding:15px; border:1px solid #fff; opacity:0; transition:opacity .35s,transform .35s; transform:translate3d(0,20px,0) scale(1.1); color:#FFF; } .box:hover h3 { transform:translate3d(0,0,0); opacity:1; } .box:hover p { opacity:1; transform:translate3d(0,0,0) scale(1); } .box2 { width:200px; height:200px; padding:15px; position:absolute; box-sizing: border-box; } /*文字滑动进入*/ * { margin: 0; padding: 0;} .lists{ width: 100%; display: flex; justify-content: center; margin-top: 100px; } .item { width: 300px; height: 300px; background-color: #99aeff; position: relative; cursor: pointer; transition: all 0.4s ease-out; box-shadow: 0px 35px 77px -17px rgba(0, 0, 0, 0.44); overflow: hidden; color: #fff; } .item img { height: 100%; width: 100%; position: absolute; top: 0; left: 0; z-index: 0; transition: all 0.4s ease-out; } .item .text { width: 100%; height: 100%; box-sizing: border-box; z-index: 99; position: absolute; padding: 30px; } .item h1 { text-shadow: 2px 2px 10px rgba(0, 0, 0, 0.3); } .item h2 { margin-top: 20px; font-style: italic; transform: translateX(200px); } .item p { margin-top: 20px; line-height: 25px; transform: translateX(-200px); transition-delay: 0.2s; } .animate-text { opacity: 0; transition: all 0.6s ease-in-out; } .item:hover { box-shadow: 0px 35px 77px -17px rgba(0, 0, 0, 0.64); transform: scale(1.05); } .item:hover img { opacity: 0.2; } .item:hover .animate-text { transform: translateX(0); opacity: 1; } .dots { position: absolute; bottom: 20px; right: 30px; margin: 0 auto; width: 30px; height: 30px; display: flex; flex-direction: column; align-items: center; justify-content: space-around; } .dots span { width: 5px; height: 5px; background-color: #fff; border-radius: 50%; display: block; opacity: 0; transition: transform 0.4s ease-out, opacity 0.5s ease; transform: translateY(30px); } .item:hover span { opacity: 1; transform: translateY(0px); } .dots span:nth-child(1) { transition-delay: 0.05s; } .dots span:nth-child(2) { transition-delay: 0.1s; } .dots span:nth-child(3) { transition-delay: 0.15s; } /*按钮滑动进入*/ .item{ width: 300px; height: 300px; margin: 100px auto; cursor: pointer; position: relative; } .item img{ width: 100%; height: 100%; background-color: #4f4f4f; position: relative; z-index: 2; } .item:hover .btns{ z-index: 3; } .item .btns{ width: 100%; height: 100%; position: absolute; top: 0; left: 0; z-index: 1; background-color: rgba(0,0,0,0.3); transition: all 0.6s; } .follow,.love{ width: 100px; height: 30px; line-height: 30px; text-align: center; border-radius: 4px; transition: all 0.3s; font-size: 14px; opacity: 0; background-color: #fff; color: #999; } .item:hover .follow{ transform: translateY(80px); opacity: 1; } .item:hover .love{ transform: translateY(-80px); opacity: 1; } .follow{ position: absolute; left: calc(50% - 50px); top: -30px; } .love{ position: absolute; bottom: -30px; left: calc(50% - 50px); } link\rlink2\rlink3\rlink4\rlink5\r","permalink":"https://www.omoe.cc/posts/vue3+vite2+router%E8%B7%AF%E7%94%B1%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/","summary":"\u003cp\u003e制作导航页相关\u003c/p\u003e","title":"Vue3+vite2+router路由初始化配置"},{"content":"WSL修改默认安装目录到其他位置\n查看当前支持的发行版\nwsl --list --online 出现 0x800701bc 错误 https://gitlab.com/hipye/apps/-/blob/74f2d1479d2ccca903a7dcfe183f328e0a62a7a9/win-linux/wsl_update_x64.msi\r1.查看WSL分发版本 在Windows PowerShell中输入如下命令:\nwsl -l --all -v 2.导出分发版为tar文件到d盘\nwsl --export Ubuntu-20.04 d:\\wsl-ubuntu20.04.tar 3.注销当前分发版\nwsl --unregister Ubuntu-20.04 4.重新导入并安装WSL在d:\\wsl-ubuntu20.04\nwsl --import Ubuntu-20.04 d:\\wsl-ubuntu20.04 d:\\wsl-ubuntu20.04.tar --version 2# --version2标识wsl2 没有则可以不加 5.设置默认登陆用户为安装时用户名\nubuntu2004 config --default-user Username 6.删除tar文件(可选)\ndel d:\\wsl-ubuntu20.04.tar ![屏幕截图 2023-03-11 192640](http://pic.omoe.cc/\r屏幕截图 2023-03-11 192640.png)\nubuntu2004.exe config --default-user root ","permalink":"https://www.omoe.cc/posts/%E4%BF%AE%E6%94%B9wsl%E9%BB%98%E8%AE%A4%E5%AE%89%E8%A3%85%E4%BD%8D%E7%BD%AE/","summary":"\u003cp\u003eWSL修改默认安装目录到其他位置\u003c/p\u003e","title":"修改wsl默认安装位置"},{"content":"winget在windows上相关\n准备依赖 VCLibs 的安装文件 https://aka.ms/Microsoft.VCLibs.x64.14.00.Desktop.appx\rUI.Xaml 的安装文件store.rg-adguard.net\r输入框左面的选择框选择 ProductFamilyName，再输入 Microsoft.UI.Xaml.2.7_8wekyb3d8bbwe 。\nUI.Xaml\rwinget安装文件 xml\rmsixbundle 依赖安装(必须要管理员权限)\nAdd-AppxProvisionedPackage -Online -PackagePath \u0026#34;C:\\Microsoft.VCLibs.x64.14.00.Desktop.appx\u0026#34; -SkipLicense Add-AppxProvisionedPackage -Online -PackagePath \u0026#34;C:\\Microsoft.UI.Xaml.2.7_7.2208.15002.0_x64__8wekyb3d8bbwe.Appx\u0026#34; -SkipLicense winget安装(必须要管理员权限)\nAdd-AppxProvisionedPackage -Online -PackagePath \u0026#34;C:\\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle\u0026#34; -LicensePath \u0026#34;C:\\7bcb1a0ab33340daa57fa5b81faec616_License1.xml\u0026#34; 软件包列表winstall.app\r安装软件 winget install 软件名称或ID：默认安装路径（目录），一般在\u0026quot;C:\\Program Files\u0026quot;目录下面。\nwinget install 软件名称或ID -l 指定路径：可自定义安装路径（目录），但是需要软件本身支持这种操作。\nwinget install 软件名称或ID -i：交互式软件安装，即在软件下载完成后，需要用户手动进行安装（①②命令无需人工干预）。\n","permalink":"https://www.omoe.cc/posts/win10ltsc%E5%AE%89%E8%A3%85winget/","summary":"\u003cp\u003ewinget在windows上相关\u003c/p\u003e","title":"Win10ltsc安装winget"},{"content":"手上有一台斐讯R1闲置挺久平常用来听听歌，较常使用的功能就是他本身自带的蓝牙连接ordlna投送无奈的是局限于生产日期它所能支持的的蓝牙协议只有4.1且由于客观原因它的Ai助手完全用不到，故此我说能利用它的只有本身硬件软件上的蓝牙和dlna\n硬件 1.斐讯R1\n2.一台旧有的Android设备(已root)|树莓派|其他(未做调试)\n3.日常使用设备(Android)\n软件安装 R1 1.升级固件到3448\n2.断电状态下长按唤醒键再通电6秒初始化升级一键优化包\n7z.001\r|7z.002\r3.安装dlna和airplay\n[app]\r局域网设备 旧设备安装linuxdepoly(设备需要root)\n[LinuxDeploy]\r软件默认配置、proot系统安装路径、默认镜像\n日常设备 播放器软件安装[BubbleUPnP]\r安装Juicessh[app]\rortermux[app]\r有juicessh则不需要 软件配置 以下使用termux 安装基础软件\nwget -q -O- https://gitee.com/hipye/st/raw/master/usedo.sh | bash ssh连接\nssh name@192.168.x.x 成功显示如下 旧设备上配置minidlna\nsudo apt-get install minidlna # 安装minidlna sudo service minidlna start # 启动minidlna sudo vim /etc/minidlna.conf # 修改默认配置 默认模板\n# * \u0026#34;A\u0026#34; for audio (eg. media_dir=A,/var/lib/minidlna/music)\r# A为音频\r# * \u0026#34;P\u0026#34; for pictures (eg. media_dir=P,/var/lib/minidlna/pictures)\r# P为图片\r# * \u0026#34;V\u0026#34; for video (eg. media_dir=V,/var/lib/minidlna/videos)\r# V为视频 # * \u0026#34;PV\u0026#34; for pictures and video (eg. media_dir=PV,/var/lib/minidlna/digital_camera)\r# PV为视频加图片 所以配置为\nmedia_dir=A,/home/name/music\r# 注释掉原有的，修改为自己的音乐文件夹\rport=8200\r# 此处为默认端口，不修改\rfriendly_name=m40\r# 此处为服务器设置名称\rinotify=yes\r# 往music文件夹添加新文件时更新 重载配置\nsudo service minidlna force-reload 播放使用 打开BubbleUnpnp，局域网出现你设置过的dlna服务器 接下来投送即可\n","permalink":"https://www.omoe.cc/posts/dlna%E5%A4%9A%E8%AE%BE%E5%A4%87%E6%8A%95%E9%80%81+%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BA%92%E8%81%94/","summary":"\u003cp\u003e手上有一台斐讯R1闲置挺久平常用来听听歌，较常使用的功能就是他本身自带的蓝牙连接\u003ccode\u003eor\u003c/code\u003edlna投送无奈的是局限于生产日期它所能支持的的蓝牙协议只有4.1且由于客观原因它的Ai助手完全用不到，故此我说能利用它的只有本身硬件软件上的蓝牙和dlna\u003c/p\u003e","title":"Dlna多设备投送or局域网互联"},{"content":"aria2编译细节以及error处理\n使用文档\n官方文档(en)\r编译前注意事项 根据系统以及平台的不同，编译的方法大同小异。仅提供linux发行版[ubuntu]的编译方法。 国内的网络特殊原因，在github\r上下载作者提供的源码\r的时候会出现下载失败以及访问龟速开全局代理\n因为不是和我存在同样操作环境下可能会有不同状况发生请善用google\r或者百度\r添加依赖 更新系统的软件\nsudo apt-get update -y \u0026amp;\u0026amp; sudo apt-get upgrade -y 安装编译时官方说明需要的依赖\nsudo apt-get install libgnutls28-dev \\ nettle-dev libgmp-dev \\ libssh2-1-dev libc-ares-dev \\ libxml2-dev zlib1g-dev \\ libsqlite3-dev pkg-config \\ libcppunit-dev autoconf \\ automake autotools-dev autopoint libtool \\ git gcc g++ libxml2-dev make quilt libtool centos指令如下\nyum install gcc-g++ gcc -y 源码下载 下载aria2的源码1.36\rwget https://github.com/aria2/aria2/archive/release-1.36.0.tar.gz 源码包里的文件树\n. ├── ABOUT-NLS ├── aclocal.m4 ├── android-config ├── AUTHORS ├── autom4te.cache ├── ChangeLog ├── compile ├── config.guess ├── config.h ├── config.h.in ├── config.log ├── config.rpath ├── config.status ├── config.sub ├── configure ├── configure.ac ├── COPYING ├── depcomp ├── deps ├── doc ├── Dockerfile.mingw ├── Dockerfile.raspberrypi ├── examples ├── INSTALL ├── install-sh ├── lib ├── libtool ├── LICENSE.OpenSSL ├── ltmain.sh ├── m4 ├── Makefile ├── Makefile.am ├── Makefile.in ├── makerelease ├── makerelease-osx.mk ├── mingw-build-memo ├── mingw-config ├── mingw-release ├── missing ├── NEWS ├── osx-package ├── po ├── README ├── README.html ├── README.rst ├── script-helper ├── src ├── stamp-h1 ├── test └── test-driver 需要修改的只有./src下的文件，没有这个目录则需要执行\nautoreconf -i 修改128线程\nsed -i \u0026#39;s/\u0026#34;1\u0026#34;, 1, 16/\u0026#34;128\u0026#34;, 1, -1/g\u0026#39; ./src/OptionHandlerFactory.cc sed -i \u0026#39;s/\u0026#34;20M\u0026#34;, 1_m, 1_g/\u0026#34;4K\u0026#34;, 1_k, 1_g/g\u0026#39; ./src/OptionHandlerFactory.cc sed -i \u0026#39;s/PREF_CONNECT_TIMEOUT, TEXT_CONNECT_TIMEOUT, \u0026#34;60\u0026#34;, 1, 600/PREF_CONNECT_TIMEOUT, TEXT_CONNECT_TIMEOUT, \u0026#34;30\u0026#34;, 1, 600/g\u0026#39; ./src/OptionHandlerFactory.cc sed -i \u0026#39;s/PREF_PIECE_LENGTH, TEXT_PIECE_LENGTH, \u0026#34;1M\u0026#34;, 1_m, 1_g/PREF_PIECE_LENGTH, TEXT_PIECE_LENGTH, \u0026#34;4k\u0026#34;, 1_k, 1_g/g\u0026#39; ./src/OptionHandlerFactory.cc sed -i \u0026#39;s/new NumberOptionHandler(PREF_RETRY_WAIT, TEXT_RETRY_WAIT, \u0026#34;0\u0026#34;, 0, 600/new NumberOptionHandler(PREF_RETRY_WAIT, TEXT_RETRY_WAIT, \u0026#34;2\u0026#34;, 0, 600/g\u0026#39; ./src/OptionHandlerFactory.cc sed -i \u0026#39;s/new NumberOptionHandler(PREF_SPLIT, TEXT_SPLIT, \u0026#34;5\u0026#34;, 1, -1,/new NumberOptionHandler(PREF_SPLIT, TEXT_SPLIT, \u0026#34;8\u0026#34;, 1, -1,/g\u0026#39; ./src/OptionHandlerFactory.cc 编译 ./configure --prefix=$PREFIX $PREFIX是变量在.bashrc下申明，位置自定义推荐在/usr下，也可以删去包括--后面的内容 需要注意的是如果使用wsl编译则需要添加以免出现嵌套win的变量导致错误 PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin make -j12 V=s #12是我的pc的线程数一般是核心数x2 make install #安装 ","permalink":"https://www.omoe.cc/posts/%E7%BC%96%E8%AF%91aria2%E6%B7%BB%E5%8A%A0128%E7%BA%BF%E7%A8%8B%E4%B8%8B%E8%BD%BD/","summary":"\u003cp\u003earia2编译细节以及error处理\u003c/p\u003e","title":"编译aria2添加128线程下载"},{"content":"无论是潘多拉还是openwrt还是其他固件其底包都需要编译支持由于个人比较喜欢openwrt的高自由度所以特地列举编译固件当中遇到的报错以及问题。\n固件首先使用的是win10的wsl建ubuntu20.04开始编译\n本地编译 添加依赖\nsudo apt-get update -y sudo apt-get install -y git \\ subversion \\ g++ \\ zlib1g-dev \\ build-essential \\ python \\ python3 \\ python3-distutils \\ libncurses5-dev \\ gawk \\ gettext \\ unzip \\ file \\ libssl-dev \\ libelf-dev \\ ecj \\ fastjar \\ java-propose-classpath \\ build-essential \\ libncursesw5-dev \\ 下载源码 clone[lean]\r源码\ngit clone https://github.com/coolsnowwolf/lede.git 添加第三方软件包 先编辑基础配置文件 feeds.conf.default 这个文本类似软件包配置\n[√] kenzo是第三方基础源有想用的软件包 [√] small是依赖包必须要添加 echo \u0026#34;src-git kenzo https://github.com/kenzok8/openwrt-packages\u0026#34; \u0026gt;\u0026gt; feeds.conf.default echo \u0026#34;src-git small https://github.com/kenzok8/small\u0026#34; \u0026gt;\u0026gt; feeds.conf.default 第三方软件更新\u0026amp;安装 ./scripts/feeds clean ./scripts/feeds update -a ./scripts/feeds install -a make menuconfig 前两项的必须选好 第一项是选择cpu的类别 第二项是你的路由型号\ndl包 由于国内的网络环境导致在下载所需软件包时会导致失败这里提供一个国内dl镜像 gitee\r修改默认网关地址 不喜欢路由器的默认地址192.168.1.1自己修改 有多台路由时避免网关重复，这一步多设备必修改。\nvim package/base-files/files/bin/config_generate 修改默认wifi的选项 默认wifi无密码 lede/package/kernel/mac80211/files/lib/wifi\nset wireless.default_radio${devidx}.encryption=psk2 #设置加密协议 set wireless.default_radio${devidx}.key= #密码 已经编译过的必须删除旧有文件\nrm -rf build_dir/ \u0026amp;\u0026amp; rm -rf staging_dir/ \u0026amp;\u0026amp; rm -rf tmp/ ssh连接开屏提醒\npackage/base-files/files/etc/banner 默认root密码\npackage/base-files/files/etc/shadow root:$1$wEehtjxj$YBu4quNfVUjzfv8p/PBo5.:0:0:99999:7::: gcc版本 解决gcc版本过低网络条件不佳则可以将源换成https://launchpad.proxy.ustclug.org\nsudo apt install software-properties-common sudo add-apt-repository ppa:ubuntu-toolchain-r/test sudo apt update sudo apt install gcc-11 g++-11 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 60 --slave /usr/bin/g++ g++ /usr/bin/g++-11 添加第三方源码 #把第三方ipk源码的package包放进source/feeds/packages目录 #把第三方ipk源码的luci包放进source/feeds/luci/applications目录 #主题放入source/feeds/luci/themes #然后运行下面的命令: ./scripts/feeds update luci ./scripts/feeds install -a -p luci ./scripts/feeds update packages ./scripts/feeds install -a -p packages wsl编译最后一步编译必须添加前置 PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin 编译 make download -j12 make -j8 V=s 特别提醒 国内特殊的网络条件下在使用make download下载依赖包时建议挂上全局避免直接404导致后面编译报error 编译好的固件在/lede/bin/targets/xxx下\n二次编译 ./scripts/feeds update -a ./scripts/feeds install -a make defconfig make -j12 download make -j8 V=s 编译出现dial tcp 142.251.42.241:443: connect: connection refused 更换一个国内能访问的代理地址：https://goproxy.cn\ngo env -w GOPROXY=https://goproxy.cn 更换软件源(开机后) vim /etc/opkg/distfeeds.conf\nsrc/gz openwrt_core https://mirrors.hit.edu.cn/openwrt/snapshots/targets/ipq40xx/generic/packages src/gz openwrt_base https://mirrors.hit.edu.cn/openwrt/snapshots/packages/arm_cortex-a7_neon-vfpv4/base #src/gz openwrt_kenzo https://mirrors.hit.edu.cn/openwrt/snapshots/packages/arm_cortex-a7_neon-vfpv4/kenzo src/gz openwrt_luci https://mirrors.hit.edu.cn/openwrt/releases/22.03.2/packages/arm_cortex-a7_neon-vfpv4/luci #src/gz openwrt_oui https://mirrors.hit.edu.cn/openwrt/snapshots/packages/arm_cortex-a7_neon-vfpv4/oui src/gz openwrt_packages https://mirrors.hit.edu.cn/openwrt/snapshots/packages/arm_cortex-a7_neon-vfpv4/packages src/gz openwrt_routing https://mirrors.hit.edu.cn/openwrt/snapshots/packages/arm_cortex-a7_neon-vfpv4/routing src/gz openwrt_telephony https://mirrors.hit.edu.cn/openwrt/snapshots/packages/arm_cortex-a7_neon-vfpv4/telephony 查找已安装包 opkg list-installed #卸载包和依赖 opkg remkve xxxx --force-removal-of-dependent-packages 第三方编译软件包 [Lienol/openwrt备份]\r官方原版 [openwrt]\r第三方固件地址国内镜像[gitee]\r利用CI自动构建项目 [openwrt_Build]\r自定义网关地址以及无线网络名称 [源码修改]\r","permalink":"https://www.omoe.cc/posts/ubuntu%E7%BC%96%E8%AF%91openwrt/","summary":"\u003cp\u003e无论是潘多拉还是openwrt还是其他固件其底包都需要编译支持由于个人比较喜欢openwrt的高自由度所以特地列举编译固件当中遇到的报错以及问题。\u003c/p\u003e","title":"Ubuntu编译openwrt"},{"content":"if判断实例 if [ ! -d $变量 ];then #command else fi 1 -e 判断文件目录 不可和-f组合 2 -f 判断文件 不可和-e组合 3 -r 检查文件夹或者文件是否可写 可组合 4 -w 检查文件夹或者文件是否可写 可组合 5 -x 检查文件夹或者文件是否可执行 可组合 6 -s 检查文件长度 none 7 -h 检查文件是否软链接 ln -s生成 8 -L 检查文件是否符号链接 none 获取当前用户的绝对路径 USE_DIR=$(pwd) 获得shell脚本所在的绝对路径\n#实例 CURRENT_DIR=$(cd $(dirname $0); pwd) #or #实例 CURRENT_DIR=$(cd `dirname $0`; pwd) dirname $0: 取得当前执行的脚本文件所在的目录； cd: 进入当前工作目录； pwd: 显示当前工作目录； 将当前工作目录输出给变量CURRENT_DIR。 获得shell脚本所在目录的父级目录的绝对路径 由于能获得shell脚本所在的绝对路径，那么同理，就可以获得脚本所在目录的父级目录的绝对路径。 #实例 PARENT_DIR=$(cd $(dirname $0);cd ..; pwd) 只是在pwd命令之前添加了cd ..到父级目录。\n$()与``作用一样，用于shell命令的执行。 dirname: 显示最后一个结点前的路径; basename: 显示最后一个结点的名称。 $0: 脚本的路径名称，包含脚本本身的名称。 sed命令文件写入 如果知道行号可以用下面的方法\nsed -i \u0026#39;88 r b.file\u0026#39; a.file 在a.txt的第88行插入文件b.txt\nawk \u0026#39;1;NR==88{system(\u0026#34;cat b.file\u0026#34;)}\u0026#39; a.file \u0026gt; a.file 如果不知道行号，可以用正則匹配\nsed -i \u0026#39;/regex/ r b.txt\u0026#39; a.txt # regex是正则表达式 awk \u0026#39;/target/{system(\u0026#34;cat b.file\u0026#34;)}\u0026#39; a.file \u0026gt; c.file --- ### tar解压 * 压缩（-c，compress）：对文档，目录进行打包操作，并没有压缩 * 解压（-x，extract）：对文档，目录进行解包操作 * 查看（-t，list）：查看压缩包或普通包里的文件名 * gzip（-z）：后缀名为.tar.gz，后缀名非硬性要求，建议这么做，下同。压缩率最低，速度快，常用 * bzip2（-j）：后缀名为.tar.bz2，压缩率高，速度较慢 * xz（-J）：后缀名为.tar.xz，压缩率超高，速度很慢，看情况使用 * -v：在处理的时候，显示正在处理的文件名 * -f：用于指定压缩后的文档名，或者是欲解压的文档名 ### 搭建简易git服务 * 安装git(这里安装略过) * 创建用户 ```bash sudo adduser git su git 复制主用户的证书，后期验证使用(git用户操作)，主用户公钥id_rsa.pub导入到.ssh/authorized_keys 初始化用户仓库，并且更改仅限git用户。 sudo git init --bare xxxx.git sudo chown -R git:git xxxx.git 禁用shell登录(非必须)，编辑/etc/passwd git:x:1001:1001:,,,:/home/git:/bin/bash #改为 git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell 使用设备远程克隆仓库 git clone git@ip:xxx.git git remote -v #检查现有远程连接，如果没有，则显示空 git remote add origin [远程仓库] #添加远程仓库 git push --set-upstream origin master #推送到远程仓库 git branch -D git branch -d #删除本地分支 git push origin --delete #删除远程分支 git push -u origin #将本地新建的分之推到远程（远程也新建相应的分之） git config commit.gpgsign ture #添加gpg验证 export GPG_TTY=$(tty) #导入已有的私钥\nexec ssh-agent bash eval ssh-agent -s ssh-add \u0026#34;C:\\Users\\xxxx\\.ssh\\id_rsa\u0026#34; #配置了公钥依旧提示: Permission denied, please try again. 在.ssh下添加\nHost github.com Hostname ssh.github.com Port 443 User git apt包管理器下禁止软件包更新 设置package包的状态为 hold；\necho package hold | dpkg --set-selections 如果想恢复可以更新的状态(install)，执行下面的命令；\necho package install | dpkg --set-selections 查询所有包的状态；\nsudo dpkg --get-selections | more 查询状态为hold的所有包;\nsudo dpkg --get-selections | grep hold ","permalink":"https://www.omoe.cc/posts/shell%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/","summary":"","title":"Shell脚本编写指南"},{"content":"前言 fish和bash脚本解释不一样，不能单纯copy.bashrc所有的配置都需要修改。\n帮助 man set 颜色提示 存在时文字蓝色，不存在时红色。\n通配符 *: 匹配文件名的全部或者一部分 **: 匹配当前目录下的所有路径的全部或一部分 管道和重定向 |： 左命令通过标准输出(/dev/stdout)重定向到右命令的标准输入(/dev/stdin) \u0026gt;、\u0026lt;： 重定向输出到右侧文件、读取右侧文件。\u0026gt;左侧默认是命令的标准输出，2\u0026gt;指定标准错误输出(/dev/stderr)。\u0026gt;\u0026amp;1表示输出到标准输出。 自动完成词语 当你敲击命令时，fish 会提示补充完整的词，在出现提示词时，按 ctrl + f 完成单词（或按 -\u0026gt; 右箭头)。局部完成：alt + -\u0026gt; tab 键激活提示，包括命令、参数、路径。 目录操作 atl + 左右箭头： 进入上一个目录或下一个目录 脚本编程 变量 $变量名: 读取变量值 set 变量名 变量值: 设置变量值 双引号内可以使用变量，单引号内不能。他们都代表字符串。 set -e 变量名： 撤销变量 set -x 变量名 变量值： 设置导出变量。即子脚本可以读取的变量。 set -u 变量名： 撤销导出变量 变量是一个列表，set a $a b 往 $a 添加新的列表项 b count $a: 列表长度 $a[1]: 列表第 1 项，$a[-1]: 列表末尾项 $a[1..2]: 列表的第 1 项到第 2 项（包括）的范围切片 $a\u0026quot;x\u0026quot;$a: 列表将和相连的内容计算笛卡尔积，如$a = 1 2 3，那么结果是：1x1 2x1 3x1 1x2 2x2 3x2 1x3 2x3 3x3。当在双引号内不会计算。 set -g 变量名 变量值： 设置全局变量，即当前脚本有效 set -l 变量名 变量值： 设置局部变量 set -U 变量名 变量值： 设置通用变量，在所有 fish 脚本内有效 string join \\n $变量： 变量转化为字符串，通常是用空格连接，string join 命令可以指定连接的字符(\\n 即换行)。 执行命令 (命令): 执行括号内的命令，输出作为参数内容插入，如 echo (uname) 等价于 echo Linux set a (命令|string split0): 命令替换通常会根据换行来建立变量的多个表项，用 string split0 根据空字符划分表项，即最多只有一个项。 命令;命令： 在同一行可以用分号并列两个命令 $status: 上一个命令的返回值，0 为成功，非 0 为失败 \u0026amp;\u0026amp;、||、!、and、or、not ： 与，或，非，如 true \u0026amp;\u0026amp; false 根据上一个命令(true)执行状态执行下一个命令(false)。与，是上个命令成功，执行下个命令，两个命令都成功，结果成功。或，是上个命令失败，执行下个命令，其中一个成功，结果成功。非，只有一个命令，如果成功，结果失败，如果失败，结果成功。and 等版本作用于上一条语句（而不是同一行的命令）。 数字运算： 例 math -s0 1+1，math 函数支持整数和小数的加(+)、减(-)、乘(x)、除(/)、幂（^）、模(%)等数学运算。-s0保留 0 位小数，即保留整数。 begin ... end: 包含在 begin 和 end 间的语句，形成一个是局部段落，可以设置局部变量，可以将内部语句的输出一起重定向。 builtin 命令：强制使用内部命令，而不使用同名的自定义函数 command 命令：调用外部命令，而不使用内部命令和自定义函数 eval \u0026quot;命令\u0026quot;： 将参数转化为命令执行 exec 命令： 以指定命令替换掉当前的shell，当前shell关闭，即该命令永不返回。 命令 (命令 | psub)： 进程替换。命令替换和管道的结合，和普通命令替换的区别是最终以命名管道（文件）的方式作为参数输入，而不是文本 控制流程 程序是从上往下一次执行的，但是，如果只是顺序执行，程序就缺乏对环境变化的理解，因此任何成熟的程序语言，都带有控制流程的语句。如，判断语句，循环语句，函数等。\n判断语句 # 将 false 替换条件语句 if false else if false else end if \u0026hellip; else \u0026hellip; end 语句段可以添加多个 else if 判断条件 ，条件成立时执行if 和 else 之间的语句，条件不成立时，执行 else 和 end 之间的语句。也可以省略 else 段。\n命令执行有成功和失败，它就是一个条件语句。\n同时，fish 使用 test 命令来提供强大的判断能力。如：test \u0026quot;$number\u0026quot; -gt 5，判断变量 number 是否大于(-gt) 5。\n数字判断：\n-gt: \u0026gt; -lt: \u0026lt; -ge: \u0026gt;= -le: \u0026lt;= -eq: = -ne: != 文件判断：\n-b：设备文件 -c: 字符设备 -d： 目录 -e： 文件存在 -f: 常规文件 -g: 文件设置了组id -G: 文件属于当前用户的组 -k：文件设置了粘滞位 -L: 符号链接文件 -O： 文件属于当前用户 -p： 管道文件 -r： 可读 -w： 可写 -x： 可执行 -s： 非零文件 -S： 套接字文件 -t： 终端 -u： 设置用户位 字符串判断：\n=: 两字符串是否相等 !=: 两字符串是否不等 -n: 非空字符串 -z: 空字符串 条件组合：\n-a: and -o: or !: ! # 选项分支 switch $a case a echo \u0026#39;$a == a\u0026#39; case b echo \u0026#39;$a == b\u0026#39; case c d echo \u0026#39;$a == c || $a == d\u0026#39; case \u0026#39;*\u0026#39; echo \u0026#39;其他，默认选项\u0026#39; end switch \u0026hellip;case 语句，根据内容的值（$a）是否等于选项（case）来控制分支。\n循环语句 循环语句根据条件是否成立，重复的执行循环内部的代码。\n# 死循环，不停的输出 loop while true echo \u0026#34;loop\u0026#34; end # *.txt 匹配当前目录下的所有txt后缀的文件，组成一个列表 # for file in ... 依次读取列表中的一项，保存到 $file # more $file 显示当前文件内容 for file in *.txt more $file end 函数 当遇到函数调用时，从当前流程跳转到函数内部执行。函数的作用等于将代码分割成若干功能的小片段。函数能够接受参数，并且能够返回值，很像数学上的函数概念，因此得名。\n# 函数 say # 参数 argv function say echo hello $argv end ### 使用函数 say jim # 输出 hello jim echo $status # 返回值输出 0 定义了一个函数，就可以随意调用了。之后想获得该函数的信息：\nfunctions say # 输出该函数的定义 functions # 输出所有已经定义的函数名 参数 函数和脚本，都可以接受参数，对参数格式的处理，可以用 argparse 函数：\nfunction say # 支持参数 -h --help -n -name -s --sooo # 其中 -n jim --name ming 可以多次输入参数 # -s9 -9 --sooo=9 都是有效参数 argparse --name=myfunc \u0026#39;h/help\u0026#39; \u0026#39;n/name=+\u0026#39; \u0026#39;s#sooo\u0026#39; --$argv if set -q _flag_h echo \u0026#39;say -n yourname\u0026#39; echo \u0026#39;say -h help\u0026#39; echo \u0026#39;say -9\u0026#39; end if set -q _flag_n set -l once 1 echo -n \u0026#39;hello \u0026#39; for var in $_flag_n if test $once -eq 0 echo -n \u0026#39;,\u0026#39; end set once 0 echo -n $var end echo \u0026#39;!\u0026#39; end if set -q _flag_s set -l i 1 echo -n \u0026#34;I\u0026#39;m S\u0026#34; while test $i -le $_flag_s echo -n \u0026#39;o\u0026#39; set i (math $i+1) end echo \u0026#39; happy!\u0026#39; end end # 使用例子 say -99 --name htqx -n xiaoming -h 事件 函数可以处理事件。即当事件产生时，将自动调用函数。\n# 处理事件 # --on-event 表示要处理的事件 function event_say --on-event say_event echo poker face:\u0026#34;$argv\u0026#34; end function say # 引发事件 emit say_event hello,$argv end 字符串处理 脚本编程的一个大对象，就是针对字符串（文本）的处理。\nstring 命令：\ncollect: 不拆分多行字符串，-N 不修剪多余的换行 echo a\\nb\\nc | string collect -N escape: 转义字符串。 -n 不带引号 \u0026ndash;type=: var 变量转义，url 网址转义，regex 正则转义 echo \u0026quot;a\\nb\\nc\u0026quot; | escape ... 分别输出：var: a_5C_nb_5C_nc; url:a%5Cnb%5Cnc; regex:a\\\\nb\\\\nc unescape：转义还原。 \u0026ndash;type=var,url join：联接字符串，指定联接符 echo a\\nb\\nc | string jion ' '：输出 a b c join0:联接字符串 echo a\\nb\\nc | string jion0：输出abc split:拆分字符串，指定字符结尾。-r 从右到左，-n 过滤空串，-m 最多拆分次数，-f 指定列。 split0:拆分字符串，拆分符 \\0 （但不要使用 split \\0 代替）。 length：长度，-q 只判断 lower：小写, -q 只判断 upper：大写，-q 只判断 pad：填充。-r 右侧填充，-c 填充字符，-w 总宽度。 echo ab\\nc |string pad -c x repeat：重复字符串。-n 重复次数，-m 最大字数，-N 最后不换行。 replace：替换匹配内容。用 $1 捕获相应组。 trim：修剪空格，-l 左空格，-r 右空格，-c 修剪符。 sub： 字串。-s 开始位置，-e 结束位置，-l 长度。 match：多组字符串进行匹配，默认是完全匹配某一项才输出对应项。 -a：全部测试匹配性，而不是匹配一个就结束 -e: 某一项匹配一部分，输出整个项。 -i：忽略大小写 -n：输出匹配项的匹配位置的范围，如输出：1 6 -r：正则匹配，输出匹配的部分,而不是整项。正则支持 perl 模式。 -v：反转匹配 内置函数 abbr -ag ll ls -l: 将 ls -l 用 ll 缩写代替 alias ll=\u0026quot;ls -l\u0026quot;： 用 ll 函数包装 ls -l argparse: 对参数文本进行解析，包括三部分，选项，规范，参数。 -n： 函数名（用于错误输出） -x： 独占 -N： 最小参数个数 -X： 最大参数个数 -i： 忽略未知参数 -s： 遇到未知参数立即停止 规范：从参数中搜索，找到并生成规范对应的局部变量_flag_x。 \u0026rsquo;n/name\u0026rsquo;: 生成局部变量_flag_n 和 _flag_name，能处理选项 -n 和 \u0026ndash;name \u0026rsquo;n/name=\u0026rsquo;: 接受选项值，如 -n9 和 \u0026ndash;name 9 和 \u0026ndash;name=9 \u0026rsquo;n/name=?\u0026rsquo;: 选项值可选 ‘n/name=+\u0026rsquo;: 可多次使用选项，保存多个值 'n#max': -99 等 \u0026rsquo;n/name=!验证函数`：对参数值进行验证 _argparse_cmd : 被验证的函数名 _flag_name: 当前验证的选项 _flag_value: 当前参数值 bg、fg、jobs、disown： 任务放后台、转到前台、任务状态、分离任务 bind：快捷键绑定，ctrl(\\c),alt(Meta),esc(\\e)等 block：屏蔽事件 breakpoint: 调试断点 cd 改变目录、cdh 通过最近访问目录列表改变目录、dirh 目录记录、prevd 上一个目录、netxd 下一个目录、pushd 入栈当前目录并进去指定目录、popd 出栈目录、pwd 显示当前目录 complete： 定义自动完成词（补全） -c / -p: 命令或者路径，没有其他参数时返回当前补全定义 -s / -l: 短选项和长选项 -a: 参数 -F / -f: 文件名参数 或 非文件名 -r： 需要参数 -w： 别名 -n ： 判断条件 -C ： 搜索相关补全 -d ： 说明描述 -e ： 删除补全 -x : -r -f 的组合 contains key I have key：查询列表中（I have key）是否包含指定项（key） count: 列表（即变量）的项总数 exit: 退出当前 shell fish_add_path: 添加搜索路径，即 $PATH fish_config: 启动 fish 配置网页 fish_is_root_user: 检查当前用户是否 root fish_key_reader: 交互式输出按键的 bind 绑定形式 fish_update_completions: 解析系统自带的补全 funcsave: 保存自定义函数 ~/.config/fish/functions/xxx.fish isatty: 文件描述符是否终端 open: 类似 xdg-open ，用关联的程序打开不同类型的文件 printf： 打印格式化文本 %d、%s：数字、文本 %o、%x：八进制、十六进制 %f、%g、%e: 六位小数浮点、浮点、科学计数 echo -n -e “a\\nb”： 输出文本，-n 结束不换行，-e 识别转义(\\n) random: 0~32767 的随机数 read : 读取用户输入 -g、-l、-u、-x、-U：存储的变量的范围 2〔方案選單〕 . -d、-t、-a、-L：指定分隔符、按toke、列表、多行列表 -s、-S：密码模式、语法高亮 -n、-z：行标记、空字符行标记 realpath -s txt：将相对路径转换为绝对路径，-s 保留符号链接文件 set：显示和设置变量，变量是列表，可以多个值 -a、-p：添加值到末尾、添加到头部 -l：局部变量（可屏蔽更大范围的同名变量） -g：全局变量 -U: 通用变量（多个 fish shell 共享） -x：导出变量（环境变量） -u：取消导出 \u0026ndash;path：路径变量（以:分隔列表项，而不是空格） \u0026ndash;unpath：取消路径模式 -e：取消变量 -q: 判断是否定义了变量 -n：所有已经定义的变量名的列表 -S: 显示变量的定义信息 变量[2]:可以使用下标对变量的表项进行操作 set_color:设置颜色 -b：背景色 -c：输出安全颜色名 -o：粗体 -d：黯淡 -i：斜体 -r：反转前景和背景色 -u：下划线 source:导入脚本 status： 查询运行时状态 suspend: 挂起 shell time：命令运行需要的时间，$CMD_DURATION 结果。 trap: 收到外部信号响应 type: 返回名称的类型 ulimit：限制资源 umask：文件创建掩码 vared:交互式修改变量 wait：等待后台任务完成 ","permalink":"https://www.omoe.cc/posts/fishshell%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/","summary":"","title":"FishShell基础配置指南"},{"content":"主题简约没有代码复制 自定义添加\n博客目录下static/css添加copy-to-clipboard.css内容\n.highlight { position: relative; } .highlight pre { padding-right: 10px; background-color:#f8f8f8 !important; } .highlight td:first-child { user-select: none; } .highlight-copy-btn { position: absolute; top: 0; right: 0; border: none; border-radius: 8px; padding: 0 5px 5px 5px; font-size: 0.5em; line-height: 1.8; color: #fff; background-color: #888; min-width: 55px; text-align: center; z-index: 1; transition: .1s; margin: 10px; opacity: 0.5; } .highlight-copy-btn:hover { background-color: #666; } 在static/js下添加copy-to-clipboard.js内容\n(function() { \u0026#39;use strict\u0026#39;; if(!document.queryCommandSupported(\u0026#39;copy\u0026#39;)) { return; } function flashCopyMessage(el, msg) { el.textContent = msg; setTimeout(function() { el.textContent = \u0026#34;Copy\u0026#34;; }, 1000); } function selectText(node) { var selection = window.getSelection(); var range = document.createRange(); range.selectNodeContents(node); selection.removeAllRanges(); selection.addRange(range); return selection; } function addCopyButton(containerEl) { var copyBtn = document.createElement(\u0026#34;button\u0026#34;); copyBtn.className = \u0026#34;highlight-copy-btn\u0026#34;; copyBtn.textContent = \u0026#34;Copy\u0026#34;; var codeEl = containerEl.firstElementChild; copyBtn.addEventListener(\u0026#39;click\u0026#39;, function() { try { var selection = selectText(codeEl); document.execCommand(\u0026#39;copy\u0026#39;); selection.removeAllRanges(); flashCopyMessage(copyBtn, \u0026#39;Copied!\u0026#39;) } catch(e) { console \u0026amp;\u0026amp; console.log(e); flashCopyMessage(copyBtn, \u0026#39;Failed :\\\u0026#39;(\u0026#39;) } }); containerEl.appendChild(copyBtn); } // Add copy button to code blocks var highlightBlocks = document.getElementsByClassName(\u0026#39;highlight\u0026#39;); Array.prototype.forEach.call(highlightBlocks, addCopyButton); ; })(); ","permalink":"https://www.omoe.cc/posts/%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/","summary":"\u003cp\u003e主题简约没有代码复制 自定义添加\u003c/p\u003e","title":"主题配置"},{"content":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0.\rHugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\nhttps://github.com/yuin/goldmark\rhttps://github.com/alecthomas/chroma\rhttps://github.com/muesli/smartcrop\rhttps://github.com/spf13/cobra\rhttps://github.com/spf13/viper\rHugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub\r.\n","permalink":"https://www.omoe.cc/about/","summary":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0.\rHugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\nhttps://github.com/yuin/goldmark\rhttps://github.","title":"About"}]